# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_MULTILEVEL_LOOKUP: 0
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: 1
  DOTNET_NOLOGO: true
  BUILD_CONFIGURATION: Release
  NuGetDirectory: ${{ github.workspace}}/nuget

defaults:
  run:
    shell: pwsh

permissions: {}

jobs:
  create_nuget:
    runs-on: windows-latest
    permissions:
      attestations: write
      contents: read
      id-token: write
    strategy:
      matrix:
        project:
          #- src/Plugin.Xamarin.OCR/Plugin.Xamarin.OCR.csproj
          - src/Plugin.Maui.OCR/Plugin.Maui.OCR.csproj
  
    steps:
    - uses: actions/checkout@v5
      with:
        fetch-depth: 0 # Get all history to allow versioning using MinVer
        show-progress: false

    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Setup MSBuild path
      uses: microsoft/setup-msbuild@v2
      with:
        vs-version: 'latest'

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
          global-json-file: 'global.json'

    - name: Install MAUI workloads (only for MAUI project)
      if: contains(matrix.project, 'Plugin.Maui.OCR')
      run: dotnet workload install maui-android maui-ios maui-maccatalyst

    - name: Determine Version
      id: minver
      run: |
        dotnet tool install --global minver-cli
        git fetch --tags
        git tag
        $version = minver --auto-increment minor --build-metadata build --verbosity trace
        echo "PACKAGE_VERSION=$version" >> $GITHUB_ENV
        echo "version=$version" >> $env:GITHUB_OUTPUT

    # - name: Restore NuGet packages for Xamarin
    #   if: contains(matrix.project, 'Plugin.Xamarin.OCR')
    #   run: msbuild /t:Restore ${{ matrix.project }} -maxcpucount

    # - name: Build Xamarin
    #   if: contains(matrix.project, 'Plugin.Xamarin.OCR')
    #   run: msbuild /m /t:Build ${{ matrix.project }} /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:GeneratePackageOnBuild=true /p:PackageVersion=${{ env.PACKAGE_VERSION }} /p:OutputPath=${{ env.NuGetDirectory }} /p:IncludeSymbols=true /p:SymbolPackageFormat=snupkg /p:RestorePackages=false -maxcpucount

    - name: Build MAUI
      if: contains(matrix.project, 'Plugin.Maui.OCR')
      run: dotnet build ${{ matrix.project }} -c ${{ env.BUILD_CONFIGURATION }} -p:Version=${{ env.PACKAGE_VERSION }}

    - name: Pack MAUI NuGet Package
      if: contains(matrix.project, 'Plugin.Maui.OCR')
      run: dotnet pack ${{ matrix.project }} --configuration ${{ env.BUILD_CONFIGURATION }} --output ${{ env.NuGetDirectory }} -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:Version=${{ env.PACKAGE_VERSION }}
  
    # Step to prepare the artifacts by copying *.nupkg and *.snpkg files to a temporary directory
    - name: Prepare Artifacts
      run: |
        mkdir -p ${{ env.NuGetDirectory }}/artifacts
        cp ${{ env.NuGetDirectory }}/*.nupkg ${{ env.NuGetDirectory }}/artifacts
        cp ${{ env.NuGetDirectory }}/*.snupkg ${{ env.NuGetDirectory }}/artifacts

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget
        if-no-files-found: error
        retention-days: 7
        path: |
          ${{ env.NuGetDirectory }}/artifacts/*.nupkg
          ${{ env.NuGetDirectory }}/artifacts/*.snupkg

  # validate_nuget:
  #   runs-on: windows-latest
  #   needs: [ create_nuget ]
  #   steps:
  #     # Install the .NET SDK indicated in the global.json file
  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v4

  #     # Download the NuGet package created in the previous job
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: nuget
  #         path: ${{ env.NuGetDirectory }}

  #     - name: Install nuget validator
  #       run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

  #     # Validate metadata and content of the NuGet package
  #     # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
  #     # If some rules are not applicable, you can disable them
  #     # using the --excluded-rules or --excluded-rule-ids option
  #     - name: Validate package
  #       run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg")

  # run_test:
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v4
  #   - name: Run tests
  #     run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --filter 'FullyQualifiedName!~TestBase'

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: windows-latest
    needs: [ create_nuget ]
    permissions:
      id-token: write  # enable GitHub OIDC token issuance for this job
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v5
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5

      # Get a short-lived NuGet API key
      - name: NuGet login (OIDC â†’ temp API key)
        uses: NuGet/login@v1
        id: login
        with:
          user: ${{ secrets.NUGET_USER }}

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key ${{ steps.login.outputs.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
